import { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { VulnerabilityCard } from "./VulnerabilityCard";
import { vulnerabilities, Vulnerability } from "@/data/vulnerabilities";
import { Shield, RotateCcw, Filter, Keyboard } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export const VulnerabilityOrbit: React.FC = () => {
  const [rotation, setRotation] = useState(0);
  const [focusedCard, setFocusedCard] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, rotation: 0 });
  const [filter, setFilter] = useState<string | null>(null);
  const orbitRef = useRef<HTMLDivElement>(null);

  const filteredVulnerabilities = filter 
    ? vulnerabilities.filter(v => v.severity === filter)
    : vulnerabilities;

  const radius = 450;
  const cardCount = filteredVulnerabilities.length;

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (focusedCard !== null) {
        if (e.key === 'Escape') {
          setFocusedCard(null);
        }
        return;
      }

      const rotationStep = 360 / cardCount;
      
      switch (e.key) {
        case 'ArrowLeft':
          setRotation(prev => prev - rotationStep);
          break;
        case 'ArrowRight':
          setRotation(prev => prev + rotationStep);
          break;
        case 'Enter':
        case ' ':
          const activeIndex = Math.round(-rotation / rotationStep) % cardCount;
          setFocusedCard(activeIndex >= 0 ? activeIndex : cardCount + activeIndex);
          e.preventDefault();
          break;
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [rotation, cardCount, focusedCard]);

  // Mouse drag controls
  const handleMouseDown = (e: React.MouseEvent) => {
    if (focusedCard !== null) return;
    setIsDragging(true);
    setDragStart({ x: e.clientX, rotation });
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging || focusedCard !== null) return;
    const deltaX = e.clientX - dragStart.x;
    const deltaRotation = deltaX * 0.5;
    setRotation(dragStart.rotation + deltaRotation);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // Touch controls
  const handleTouchStart = (e: React.TouchEvent) => {
    if (focusedCard !== null) return;
    setIsDragging(true);
    setDragStart({ x: e.touches[0].clientX, rotation });
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging || focusedCard !== null) return;
    const deltaX = e.touches[0].clientX - dragStart.x;
    const deltaRotation = deltaX * 0.5;
    setRotation(dragStart.rotation + deltaRotation);
  };

  const handleTouchEnd = () => {
    setIsDragging(false);
  };

  const handleCardFocus = (index: number) => {
    setFocusedCard(index);
  };

  const handleCardBlur = () => {
    setFocusedCard(null);
  };

  const resetOrbit = () => {
    setRotation(0);
    setFocusedCard(null);
  };

  const severityFilters = ['Critical', 'High', 'Medium', 'Low'];

  return (
    <div className="min-h-screen bg-gradient-cosmic flex flex-col items-center justify-center relative overflow-hidden">
      {/* Background Effects */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5" />
      <div className="absolute top-20 left-20 w-96 h-96 bg-primary/10 rounded-full blur-3xl animate-float" />
      <div className="absolute bottom-20 right-20 w-96 h-96 bg-accent/10 rounded-full blur-3xl animate-float" style={{ animationDelay: '3s' }} />

      {/* Header */}
      <motion.div 
        className="absolute top-8 left-8 z-20"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-glass-background/20 backdrop-blur-glass rounded-lg border border-glass-border/30">
            <Shield className="w-6 h-6 text-primary" />
          </div>
          <div>
            <h1 className="text-xl font-bold text-foreground">Security Vulnerabilities</h1>
            <p className="text-sm text-muted-foreground">Interactive 360° Showcase</p>
          </div>
        </div>
      </motion.div>

      {/* Controls */}
      <motion.div 
        className="absolute top-8 right-8 z-20 flex items-center gap-4"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        {/* Filter Controls */}
        <div className="flex items-center gap-2">
          <Filter className="w-4 h-4 text-muted-foreground" />
          <div className="flex gap-1">
            <Button
              variant={filter === null ? "default" : "ghost"}
              size="sm"
              onClick={() => setFilter(null)}
              className="h-7 px-2 text-xs"
            >
              All
            </Button>
            {severityFilters.map((severity) => (
              <Button
                key={severity}
                variant={filter === severity ? "default" : "ghost"}
                size="sm"
                onClick={() => setFilter(severity)}
                className="h-7 px-2 text-xs"
              >
                {severity}
              </Button>
            ))}
          </div>
        </div>

        {/* Reset Button */}
        <Button variant="outline" size="sm" onClick={resetOrbit}>
          <RotateCcw className="w-4 h-4 mr-1" />
          Reset
        </Button>
      </motion.div>

      {/* Instructions */}
      <motion.div 
        className="absolute bottom-8 left-8 z-20"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.4 }}
      >
        <div className="flex items-center gap-2 p-3 bg-glass-background/20 backdrop-blur-glass rounded-lg border border-glass-border/30">
          <Keyboard className="w-4 h-4 text-primary" />
          <div className="text-xs text-muted-foreground">
            <div>• Drag to rotate orbit • Arrow keys to navigate</div>
            <div>• Click card for details • ESC to exit focus</div>
          </div>
        </div>
      </motion.div>

      {/* Stats */}
      <motion.div 
        className="absolute bottom-8 right-8 z-20"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.6 }}
      >
        <div className="flex items-center gap-4 p-3 bg-glass-background/20 backdrop-blur-glass rounded-lg border border-glass-border/30">
          <Badge variant="outline" className="text-xs">
            {filteredVulnerabilities.length} vulnerabilities
          </Badge>
          <Badge variant="outline" className="text-xs">
            {vulnerabilities.filter(v => v.severity === 'Critical').length} critical
          </Badge>
        </div>
      </motion.div>

      {/* Central Hub */}
      <motion.div
        className="absolute z-10"
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.8, delay: 0.3 }}
      >
        <div className="w-32 h-32 rounded-full bg-gradient-primary shadow-glow shadow-primary/30 flex items-center justify-center">
          <div className="w-24 h-24 rounded-full bg-glass-background/20 backdrop-blur-glass border border-glass-border/30 flex items-center justify-center">
            <Shield className="w-8 h-8 text-primary animate-glow-pulse" />
          </div>
        </div>
      </motion.div>

      {/* Orbit Container */}
      <div
        ref={orbitRef}
        className="relative w-full h-full flex items-center justify-center cursor-grab active:cursor-grabbing"
        style={{ perspective: '1000px' }}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait">
          {filteredVulnerabilities.map((vulnerability, index) => {
            const angle = (index * 360) / cardCount + rotation;
            const radians = (angle * Math.PI) / 180;
            const x = Math.cos(radians) * radius;
            const z = Math.sin(radians) * radius;
            
            const isActive = Math.abs(angle % 360) < (180 / cardCount) || 
                           Math.abs((angle % 360) - 360) < (180 / cardCount);

            return (
              <VulnerabilityCard
                key={`${vulnerability.number}-${filter}`}
                vulnerability={vulnerability}
                isActive={isActive}
                isFocused={focusedCard === index}
                onFocus={() => handleCardFocus(index)}
                onBlur={handleCardBlur}
                style={{
                  position: 'absolute',
                  transform: `translate3d(${x}px, 0px, ${z}px) rotateY(${-angle}deg)`,
                  zIndex: focusedCard === index ? 100 : Math.round(50 + z),
                }}
              />
            );
          })}
        </AnimatePresence>
      </div>

      {/* Focus Mode Overlay */}
      <AnimatePresence>
        {focusedCard !== null && (
          <motion.div
            className="fixed inset-0 bg-background/80 backdrop-blur-sm z-40"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleCardBlur}
          />
        )}
      </AnimatePresence>
    </div>
  );
};